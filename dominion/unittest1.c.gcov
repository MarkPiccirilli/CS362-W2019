        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/**************************************
        -:    2: * Title: shuffle function unit test
        -:    3: * Author: Mark Piccirilli
        -:    4: * Date: 2/6/19
        -:    5: * Description: This is a unit test for the shuffle funtion
        -:    6: * *******************************************/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <stdlib.h>
        -:   12:#include <stdio.h>
        -:   13:#include <string.h>
        -:   14:
        1:   15:int main() {
        -:   16:
        1:   17:	int numberOfPlayers = 3;
        1:   18:	int kCards[10] = {curse, estate, province, adventurer, feast, gardens, smithy, minion, steward, salvager};
        1:   19:	int seed = 1000;
        -:   20:	struct gameState G, testG;
        -:   21:	int i, j; //counters
        1:   22:	int failCount = 0; //for testing if the cards have been sufficently reordered
        -:   23:
        1:   24:	initializeGame(numberOfPlayers,  kCards, seed, &G);
        -:   25:
        1:   26:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   27:	
        1:   28:	printf("TESTING SHUFFLE FUNCTION\n");
        1:   29:	printf("\n");
        -:   30:
        -:   31:	//suffle the player decks
        4:   32:	for(i=0; i<numberOfPlayers; i++) {
        3:   33:		shuffle(i, &testG);
        -:   34:	}
        -:   35:
        -:   36:	//check that the new deck count is correct
        4:   37:	for(i=0; i<numberOfPlayers; i++) {
        3:   38:		if(testG.deckCount[i] == G.deckCount[i]) {
        3:   39:			printf("PASSED DECK COUNT TEST: expected count: %d, actual count: %d\n", G.deckCount[i], testG.deckCount[i]);
        -:   40:		}	
        -:   41:		else {
    #####:   42:			printf("FAILED DECK COUNT TEST: expected count: %d, actual count: %d\n", G.deckCount[i], testG.deckCount[i]);
        -:   43:		}
        -:   44:	}
        -:   45:
        -:   46:	//check that the cards have been reordered
        4:   47:	for(i=0; i<numberOfPlayers; i++) {
       28:   48:		for(j=0; j<G.deckCount[i]; j++) {
       25:   49:			if(G.deck[i][j] == testG.deck[i][j]) {
       11:   50:				failCount++;
        -:   51:			}
        -:   52:		}
        3:   53:		if(failCount >= G.deckCount[i]/2) {
        3:   54:			printf("FAILED RANDOMIZATION TEST: cards were not sufficiently randomized\n");
        -:   55:		}
        -:   56:		else {
    #####:   57:			printf("PASSED RANDOMIZATION TEST: cards were sufficiently randomized\n");
        -:   58:		}
        3:   59:		printf("failCount: %d\n", failCount);
        3:   60:		printf("deckCount: %d\n", G.deckCount[i]);
        -:   61:	}
        -:   62:	
        1:   63:	printf("\n");
        1:   64:	return 0;
        -:   65:}
